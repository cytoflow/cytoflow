# -*- coding: utf-8 -*-
#
# CytoFlow documentation build configuration file, created by
# sphinx-quickstart on Fri Mar  6 19:42:50 2015.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os, glob, pathlib, shutil

# are we running on RTD?
on_rtd = os.environ.get('READTHEDOCS', None) == 'True'

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
# sys.path.insert(0, os.path.abspath('../src/cytoflow'))
sys.path.insert(0, os.path.abspath('..'))
sys.path.insert(0, os.path.abspath('../..'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.

sys.path.insert(0, os.path.abspath('sphinxext'))

extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.todo',
    'sphinx.ext.mathjax',
    'sphinx.ext.viewcode',
    'sphinx.ext.autosummary',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    'plot_directive',
    'embedded_builder',
    # 'fulltoc'
]

if tags.has("embedded_help"):  # @UndefinedVariable
    extensions.remove('sphinx.ext.viewcode')

# Generate the API documentation when building
autosummary_generate = True

# autodoc options
autodoc_member_order = 'bysource'
if on_rtd:
    autodoc_mock_imports = ['cytoflow.utility.logicle_ext.Logicle']

# napoleon options
napoleon_use_param = False

# Include the example source for plots in API docs
plot_include_source = True
plot_formats = [("png", 90)]
plot_html_show_formats = False
plot_html_show_source_link = False
plot_working_directory = pathlib.Path(__file__).parents[1].joinpath('cytoflow', 'tests', 'data').as_posix()

plot_pre_code = "import matplotlib.pyplot as plt; plt.switch_backend('agg')"
# plot_rcparams = {'backend' : "Agg"}
# plot_apply_rcparams = True
# plot_pre_code = 'import matplotlib; matplotlib.use("Agg")'

# intersphinx config
intersphinx_mapping = {'pandas' : ('http://pandas.pydata.org/pandas-docs/stable/', None),
                       'envisage' : ('http://docs.enthought.com/envisage/', None),
                       'traits' : ('http://docs.enthought.com/traits/', None)} 


# Add any paths that contain templates here, relative to this directory.
# templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Cytoflow'
import time
copyright = u'Massachusetts Institute of Technology 2015-2018, Brian Teague 2018-{}'.format(time.strftime("%Y"))

# Configure the sidebar

# # Configure the footer
# if tags.has("embedded_help"):  # @UndefinedVariable
#     templates_path = ['embedded_templates']

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.

# this is a workaround so we can use versioneer without importing the entire cytoflow module
import versioneer

old_cwd = os.getcwd()
os.chdir(os.path.split(old_cwd)[0])

# The short X.Y version.
version = versioneer.get_version()
# The full version, including alpha/beta/rc tags.
release = versioneer.get_version()

os.chdir(old_cwd)

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build', '*.logicle_ext*.rst']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
# html_theme = 'alabaster'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {'show_powered_by' : False}

html_sidebars = { '**': ['about.html', 'globaltoc.html', 'relations.html', 'sourcelink.html', 'searchbox.html'], }

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []
#html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'cytoflow'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'Cytoflow.tex', u'Cytoflow Documentation',
   u'Brian Teague', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'cytoflow', u'Cytoflow Documentation',
     [u'Brian Teague'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'Cytoflow', u'Cytoflow Documentation',
   u'Brian Teague', 'Cytoflow', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

def setup(app):
    app.connect('builder-inited', run_apidoc)
    app.connect('builder-inited', set_builder_config)
    app.connect('build-finished', cleanup_apidoc)
    app.connect('build-finished', copy_embedded_help)


    sys.modules['sys'].IN_SPHINX = True
        
def set_builder_config(app):
    if app.builder.name == 'embedded_help':  # @UndefinedVariable
        app.builder.config.html_copy_source = False
        app.builder.config.html_show_sourcelink = False
        app.builder.config.html_show_copyright = False
        app.builder.config.html_show_sphinx = False
        
        app.builder.copysource = False
        app.builder.add_permalinks = False
        app.builder.embedded = True
        app.builder.download_support = False
        app.builder.search = False
        
        app.config.plot_include_source = False


def run_apidoc(app):
    if app.builder.name == 'embedded_help':  # @UndefinedVariable
        os.environ['SPHINX_APIDOC_OPTIONS'] = 'no-members'

    from sphinx.ext.apidoc import main
    sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
    cur_dir = os.path.abspath(os.path.dirname(__file__))
    
    try:
        filelist = glob.glob(os.path.join(cur_dir, "cytoflow*.rst"))
        for f in filelist:
            os.unlink(f)
    except FileNotFoundError:
        pass
     
    if app.builder.name == 'embedded_help':  # @UndefinedVariable
        module = os.path.join(cur_dir,"..","cytoflowgui")        
        main(['-T', '-e', '-E', '-f', '-o', cur_dir, module, module + "/tests/*"])    
    else:
        module = os.path.join(cur_dir,"..","cytoflow")    
        main(['-T', '-e', '-E', '-f', '-o', cur_dir, module, module + "/tests/*"])
        
def cleanup_apidoc(app, exc):  # @UnusedVariable
    cur_dir = os.path.abspath(os.path.dirname(__file__))
    
    try:
        filelist = glob.glob(os.path.join(cur_dir, "cytoflow*.rst"))
        for f in filelist:
            os.unlink(f)
    except FileNotFoundError:
        pass

def copy_embedded_help(app, exc):  # @UnusedVariable
    if app.builder.name == 'embedded_help':
        dest_dir = pathlib.Path(__file__).parents[1].joinpath('cytoflowgui', 'help').as_posix()
        print("Copying {} to {}".format(app.outdir, dest_dir))
        shutil.rmtree(dest_dir, ignore_errors = True)
        shutil.copytree(app.outdir, dest_dir)
        
        img_dir_in = pathlib.Path(app.srcdir).joinpath('images').as_posix()
        img_dir_out = pathlib.Path(dest_dir).joinpath('_images').as_posix()
        
        try:
            filelist = glob.glob(os.path.join(img_dir_in, "*"))
            for f in filelist:
                print(f)
                shutil.copy(f, img_dir_out)
        except FileNotFoundError:
            pass
